---
name: 'Build and test everything'

on:
  push:
  pull_request:
  workflow_call:
    inputs:
      branch-name:
        description: 'Checkout to a specific branch'
        required: true
        default: ''
        type: string
  schedule:
    - cron: '0 22 * * 3'

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

env:
  COMPILER: clang
  CLANG_VERSION: '13'
  # github.workspace variable points to the Runner home folder. Container home folder defined below.
  REPO_HOME: '/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}'
  BUILDER_VERSION: '0.0.0-git1'
  COVERAGE: ${{ github.repository == 'PowerDNS/pdns' && 'yes' || 'no' }}
  LLVM_PROFILE_FILE: "/tmp/code-%p.profraw"
  OPTIMIZATIONS: yes
  DECAF_SUPPORT: yes

jobs:
  get-image-base:
    name: generate image
    runs-on: ubuntu-22.04
    outputs:
      id: ${{ steps.get-image-id.outputs.id }}
      tag: ${{ steps.get-image-tag.outputs.tag }}
    steps:
      - name: get-image-id
        run: echo "id=ghcr.io/powerdns/base-pdns-ci-image/debian-12-pdns-base" >> $GITHUB_OUTPUT
      - name: get-image-tag
        run: echo "tag=dnsdist-1.9.x" >> $GITHUB_OUTPUT
      - run: echo "${{ steps.get-image-id.outputs.id }}:${{ steps.get-image-tag.outputs.tag }}}"

  test:
    name: test
    runs-on: ubuntu-22.04
    needs: get-image-base
    container:
      image: ghcr.io/powerdns/base-pdns-ci-image/debian-12-pdns-base:master
      env:
        ASAN_OPTIONS: detect_leaks=0
        SANITIZERS: ${{ matrix.sanitizers }}
        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ env.REPO_HOME }}/build-scripts/UBSan.supp"
        UNIT_TESTS: yes
        FUZZING_TARGETS: yes
      options: --privileged --sysctl net.ipv6.conf.all.disable_ipv6=0
    steps:
      # workaround issue 9491 repo actions/runner-images
      - run: echo "${{ needs.get-image-base.outputs.id }}:${{ needs.get-image-base.outputs.tag }}"

# #  build-dnsdist:
# #    name: build dnsdist
# #    if: ${{ !github.event.schedule || vars.SCHEDULED_JOBS_BUILD_AND_TEST_ALL }}
# #    runs-on: ubuntu-22.04
# #    needs: get-image-base
# #    strategy:
# #      matrix:
# #        sanitizers: [ubsan+asan, tsan]
# #        features: [least, full]
# #        exclude:
# #          - sanitizers: tsan
# #            features: least
# #    container:
# #      image: "${{ needs.get-image-base.outputs.id }}:${{ needs.get-image-base.outputs.tag }}"
# #      env:
# #        ASAN_OPTIONS: detect_leaks=0
# #        SANITIZERS: ${{ matrix.sanitizers }}
# #        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ env.REPO_HOME }}/build-scripts/UBSan.supp"
# #        UNIT_TESTS: yes
# #        FUZZING_TARGETS: yes
# #      options: --privileged --sysctl net.ipv6.conf.all.disable_ipv6=0
# #    defaults:
# #      run:
# #        working-directory: ./pdns/dnsdistdist/dnsdist-${{ env.BUILDER_VERSION }}
# #    steps:
# #      # workaround issue 9491 repo actions/runner-images
# #      - name: get runner image version
# #        id: runner-image-version
# #        run: |
# #          echo "image-version=$(echo $ImageVersion)" >> "$GITHUB_OUTPUT"
# #        working-directory: .
#       - name: modify number of bits to use for aslr entropy
#         if: ${{ steps.runner-image-version.outputs.ImageVersion }} == '20240310.1.0'
#         run: |
#           sudo sysctl -a | grep vm.mmap.rnd
#           sudo sysctl -w vm.mmap_rnd_bits=28
#         working-directory: .
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 5
#           submodules: recursive
#           ref: ${{ inputs.branch-name }}
#       - name: get timestamp for cache
#         id: get-stamp
#         run: |
#           echo "stamp=$(/bin/date +%s)" >> "$GITHUB_OUTPUT"
#         shell: bash
#         working-directory: .
#       - run: mkdir -p ~/.ccache
#         working-directory: .
#       - name: let GitHub cache our ccache data
#         uses: actions/cache@v4
#         with:
#           path: ~/.ccache
#           key: dnsdist-${{ matrix.features }}-${{ matrix.sanitizers }}-ccache-${{ steps.get-stamp.outputs.stamp }}
#           restore-keys: dnsdist-${{ matrix.features }}-${{ matrix.sanitizers }}-ccache-
#       - run: inv ci-install-rust ${{ env.REPO_HOME }}
#         working-directory: ./pdns/dnsdistdist/
#       - run: inv ci-build-and-install-quiche
#         working-directory: ./pdns/dnsdistdist/
#       - run: inv ci-autoconf
#         working-directory: ./pdns/dnsdistdist/
#       - run: inv ci-dnsdist-configure ${{ matrix.features }}
#         working-directory: ./pdns/dnsdistdist/
#       - run: inv ci-make-distdir
#         working-directory: ./pdns/dnsdistdist/
#       - run: inv ci-dnsdist-configure ${{ matrix.features }}
#       - run: inv ci-dnsdist-make-bear
#       - run: inv ci-dnsdist-run-unit-tests
#       - run: inv generate-coverage-info ./testrunner $GITHUB_WORKSPACE
#         if: ${{ env.COVERAGE == 'yes' && matrix.sanitizers != 'tsan' }}
#       - name: Coveralls Parallel dnsdist unit
#         if: ${{ env.COVERAGE == 'yes' && matrix.sanitizers != 'tsan' }}
#         uses: coverallsapp/github-action@v2
#         with:
#           flag-name: dnsdist-unit-${{ matrix.features }}-${{ matrix.sanitizers }}
#           path-to-lcov: $GITHUB_WORKSPACE/coverage.lcov
#           parallel: true
#           allow-empty: true
#       - run: inv ci-make-install
#       - run: ccache -s
#       - run: echo "normalized-branch-name=${{ inputs.branch-name || github.ref_name }}" | tr "/" "-" >> "$GITHUB_ENV"
#       - name: Store the binaries
#         uses: actions/upload-artifact@v4 # this takes 30 seconds, maybe we want to tar
#         with:
#           name: dnsdist-${{ matrix.features }}-${{ matrix.sanitizers }}-${{ env.normalized-branch-name }}
#           path: /opt/dnsdist
#           retention-days: 1
# 
#   test-dnsdist-regression:
#     needs: build-dnsdist
#     runs-on: ubuntu-22.04
#     strategy:
#       matrix:
#         sanitizers: [ubsan+asan, tsan]
#     container:
#       image: ghcr.io/powerdns/base-pdns-ci-image/debian-12-pdns-base:master
#       env:
#         UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ env.REPO_HOME }}/build-scripts/UBSan.supp"
#         # Disabling (intercept_send=0) the custom send wrappers for ASAN and TSAN because they cause the tools to report a race that doesn't exist on actual implementations of send(), see https://github.com/google/sanitizers/issues/1498
#         ASAN_OPTIONS: detect_leaks=0:intercept_send=0
#         TSAN_OPTIONS: "halt_on_error=1:intercept_send=0:suppressions=${{ env.REPO_HOME }}/pdns/dnsdistdist/dnsdist-tsan.supp"
#         # IncludeDir tests are disabled because of a weird interaction between TSAN and these tests which ever only happens on GH actions
#         SKIP_INCLUDEDIR_TESTS: yes
#         SANITIZERS: ${{ matrix.sanitizers }}
#         COVERAGE: yes
#       options: --sysctl net.ipv6.conf.all.disable_ipv6=0 --privileged
#     steps:
#       # workaround issue 9491 repo actions/runner-images
#       - name: get runner image version
#         id: runner-image-version
#         run: |
#           echo "image-version=$(echo $ImageVersion)" >> "$GITHUB_OUTPUT"
#         working-directory: .
#       - name: modify number of bits to use for aslr entropy
#         if: ${{ steps.runner-image-version.outputs.ImageVersion }} == '20240310.1.0'
#         run: |
#           sudo sysctl -a | grep vm.mmap.rnd
#           sudo sysctl -w vm.mmap_rnd_bits=28
#         working-directory: .
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 5
#           submodules: recursive
#           ref: ${{ inputs.branch-name }}
#       - run: echo "normalized-branch-name=${{ inputs.branch-name || github.ref_name }}" | tr "/" "-" >> "$GITHUB_ENV"
#       - name: Fetch the binaries
#         uses: actions/download-artifact@v4
#         with:
#           name: dnsdist-full-${{ matrix.sanitizers }}-${{ env.normalized-branch-name }}
#           path: /opt/dnsdist
#       - run: inv install-clang-runtime
#       - run: inv install-dnsdist-test-deps
#       - run: inv test-dnsdist
#       - run: inv generate-coverage-info /opt/dnsdist/bin/dnsdist $GITHUB_WORKSPACE
#         if: ${{ env.COVERAGE == 'yes' && matrix.sanitizers != 'tsan' }}
#       - name: Coveralls Parallel dnsdist regression
#         if: ${{ env.COVERAGE == 'yes' && matrix.sanitizers != 'tsan' }}
#         uses: coverallsapp/github-action@v2
#         with:
#           flag-name: dnsdist-regression-full-${{ matrix.sanitizers }}
#           path-to-lcov: $GITHUB_WORKSPACE/coverage.lcov
#           parallel: true
#           allow-empty: true
# 
#   collect:
#     needs:
#       - build-dnsdist
#       - test-dnsdist-regression
#     if: success() || failure()
#     runs-on: ubuntu-22.04
#     steps:
#       - name: Coveralls Parallel Finished
#         if: ${{ env.COVERAGE == 'yes' }}
#         uses: coverallsapp/github-action@v2
#         with:
#           parallel-finished: true
#       - name: Install jq and yq
#         run: "sudo snap install jq yq"
#       - name: Fail job if any of the previous jobs failed
#         run: "for i in `echo '${{ toJSON(needs) }}' | jq '.[].result' | tr -d '\"'`; do if [[ $i == 'failure' ]]; then echo '${{ toJSON(needs) }}'; exit 1; fi; done;"
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 5
#           submodules: recursive
#           ref: ${{ inputs.branch-name }}
#       - name: Get list of jobs in the workflow
#         run: "yq e '.jobs | keys' .github/workflows/build-and-test-all.yml | awk '{print $2}' | grep -v collect | sort | tee /tmp/workflow-jobs-list.yml"
#       - name: Get list of prerequisite jobs
#         run: "echo '${{ toJSON(needs) }}' | jq 'keys | .[]' | tr -d '\"' | sort | tee /tmp/workflow-needs-list.yml"
#       - name: Fail if there is a job missing on the needs list
#         run: "if ! diff -q /tmp/workflow-jobs-list.yml /tmp/workflow-needs-list.yml; then exit 1; fi"

# FIXME: if we can make upload/download-artifact fasts, running unit tests outside of build can let regression tests start earlier
