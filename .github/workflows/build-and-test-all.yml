---
name: 'Build and test everything'

on:
  push:
  pull_request:
  workflow_call:
    inputs:
      branch-name:
        description: 'Checkout to a specific branch'
        required: true
        default: ''
        type: string
  schedule:
    - cron: '0 22 * * 3'

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

jobs:
  build-dnsdist:
    name: build dnsdist
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        sanitizers: [ubsan+asan, tsan]
    env:
      UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ github.workspace }}/build-scripts/UBSan.supp"
      ASAN_OPTIONS: detect_leaks=0
      SANITIZERS: ${{ matrix.sanitizers }}
    defaults:
      run:
        working-directory: ./pdns/dnsdistdist/
    steps:
      - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: recursive
          ref: ${{ inputs.branch-name }}
      - name: get timestamp for cache
        id: get-stamp
        run: |
          echo "stamp=$(/bin/date +%s)" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: let GitHub cache our ccache data
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: dnsdist-${{ matrix.sanitizers }}-ccache-${{ steps.get-stamp.outputs.stamp }}
          restore-keys: dnsdist-${{ matrix.sanitizers }}-ccache-
      - run: ../../build-scripts/gh-actions-setup-inv  # this runs apt update+upgrade
      - run: inv apt-fresh
      - run: inv install-clang
      - run: inv install-dnsdist-build-deps
      - run: inv ci-autoconf
      - run: inv ci-dnsdist-configure
      - run: inv ci-dnsdist-make
      - run: inv ci-dnsdist-run-unit-tests
      - run: inv ci-make-install
      - run: ccache -s
      - run: echo "normalized-branch-name=${{ inputs.branch-name || github.ref_name }}" | tr "/" "-" >> "$GITHUB_ENV"
      - name: Store the binaries
        uses: actions/upload-artifact@v3 # this takes 30 seconds, maybe we want to tar
        with:
          name: dnsdist-${{ matrix.sanitizers }}-${{ env.normalized-branch-name }}
          path: /opt/dnsdist
          retention-days: 1

  test-dnsdist-regression:
    needs: build-dnsdist
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        sanitizers: [ubsan+asan, tsan]
    env:
      UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ github.workspace }}/build-scripts/UBSan.supp"
      ASAN_OPTIONS: detect_leaks=0
      TSAN_OPTIONS: "halt_on_error=1:suppressions=${{ github.workspace }}/pdns/dnsdistdist/dnsdist-tsan.supp"
      # IncludeDir tests are disabled because of a weird interaction between TSAN and these tests which ever only happens on GH actions
      SKIP_INCLUDEDIR_TESTS: yes
    steps:
      - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: recursive
          ref: ${{ inputs.branch-name }}
      - run: echo "normalized-branch-name=${{ inputs.branch-name || github.ref_name }}" | tr "/" "-" >> "$GITHUB_ENV"
      - name: Fetch the binaries
        uses: actions/download-artifact@v3
        with:
          name: dnsdist-${{ matrix.sanitizers }}-${{ env.normalized-branch-name }}
          path: /opt/dnsdist
      - run: build-scripts/gh-actions-setup-inv  # this runs apt update+upgrade
      - run: inv install-clang-runtime
      - run: inv install-dnsdist-test-deps
      - run: inv test-dnsdist

  collect:
    needs:
      - build-dnsdist
      - test-dnsdist-regression
    runs-on: ubuntu-20.04
    steps:
      - name: Install jq and yq
        run: "sudo snap install jq yq"
      - name: Fail job if any of the previous jobs failed
        run: "for i in `echo '${{ toJSON(needs) }}' | jq '.[].result' | tr -d '\"'`; do if [[ $i == 'failure' ]]; then echo '${{ toJSON(needs) }}'; exit 1; fi; done;"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: recursive
          ref: ${{ inputs.branch-name }}
      - name: Install yq
        run: sudo wget https://github.com/mikefarah/yq/releases/download/v4.9.6/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
      - name: Get full list of jobs for this workflow
        run: yq e '.jobs | keys' .github/workflows/build-and-test-all.yml | grep -v '^- collect' | sort | tee /tmp/workflow-jobs-list.yml
      - name: Get list of jobs the collect job depends on
        run: yq e '.jobs.collect.needs | ... comments=""' .github/workflows/build-and-test-all.yml | sort | tee /tmp/workflow-collect-dependencies.yml
      - name: Diff them
        run: diff -u /tmp/workflow-jobs-list.yml /tmp/workflow-collect-dependencies.yml

# FIXME: if we can make upload/download-artifact fasts, running unit tests outside of build can let regression tests start earlier
