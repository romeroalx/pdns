---
name: 'Build and test everything -debian11'

on:
  # push:
  pull_request:
  workflow_call:
    inputs:
      branch-name:
        description: 'Checkout to a specific branch'
        required: true
        default: ''
        type: string
  schedule:
    - cron: '0 22 * * 3'

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

env:
  COMPILER: clang
  CLANG_VERSION: '13'
  # github.workspace variable points to the Runner home folder. Container home folder defined below.
  REPO_HOME: '/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}'
  BUILDER_VERSION: '0.0.0-git1'
  COVERAGE: ${{ github.repository == 'PowerDNS/pdns' && 'yes' || 'no' }}
  LLVM_PROFILE_FILE: "/tmp/code-%p.profraw"
  OPTIMIZATIONS: yes
  DECAF_SUPPORT: yes

jobs:
  build-auth:
    name: build auth
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/powerdns/base-pdns-ci-image/debian-11-pdns-base:master
      env:
        ASAN_OPTIONS: detect_leaks=0
        FUZZING_TARGETS: yes
        SANITIZERS: asan+ubsan
        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ env.REPO_HOME }}/build-scripts/UBSan.supp"
        UNIT_TESTS: yes
      options: --privileged --sysctl net.ipv6.conf.all.disable_ipv6=0
    defaults:
      run:
        working-directory: ./pdns-${{ env.BUILDER_VERSION }}
    steps:
      # workaround issue 9491 repo actions/runner-images
      - name: get runner image version
        id: runner-image-version
        run: |
          echo "image-version=$(echo $ImageVersion)" >> "$GITHUB_OUTPUT"
        working-directory: .
      - name: modify number of bits to use for aslr entropy
        if: ${{ steps.runner-image-version.outputs.ImageVersion }} == '20240310.1.0'
        run: |
          sudo sysctl -a | grep vm.mmap.rnd
          sudo sysctl -w vm.mmap_rnd_bits=28
        working-directory: .
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: recursive
          ref: ${{ inputs.branch-name }}
      - name: get timestamp for cache
        id: get-stamp
        run: |
          echo "stamp=$(/bin/date +%s)" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: .
      - run: mkdir -p ~/.ccache
        working-directory: .
      - name: let GitHub cache our ccache data
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: auth-ccache-${{ steps.get-stamp.outputs.stamp }}
          restore-keys: auth-ccache-
      - run: inv ci-autoconf
        working-directory: .
      - run: inv ci-auth-configure
        working-directory: .
      - run: inv ci-make-distdir
        working-directory: .
      - run: inv ci-auth-configure
      - run: inv ci-auth-make-bear  # This runs under pdns-$BUILDER_VERSION/pdns/
      - run: inv ci-auth-install-remotebackend-test-deps
      - run: inv ci-auth-run-unit-tests
      - run: inv generate-coverage-info ./testrunner $GITHUB_WORKSPACE
        if: ${{ env.COVERAGE == 'yes' }}
        working-directory: ./pdns-${{ env.BUILDER_VERSION }}/pdns
      - name: Coveralls Parallel auth unit
        if: ${{ env.COVERAGE == 'yes' }}
        uses: coverallsapp/github-action@v2
        with:
          flag-name: auth-unit-${{ matrix.sanitizers }}
          path-to-lcov: $GITHUB_WORKSPACE/coverage.lcov
          parallel: true
          allow-empty: true
      - run: inv ci-make-install
      - run: ccache -s
      - run: echo "normalized-branch-name=${{ inputs.branch-name || github.ref_name }}" | tr "/" "-" >> "$GITHUB_ENV"
      - name: Store the binaries
        uses: actions/upload-artifact@v4 # this takes 30 seconds, maybe we want to tar
        with:
          name: pdns-auth-${{ env.normalized-branch-name }}
          path: /opt/pdns-auth
          retention-days: 1

  test-auth-backend:
    needs: build-auth
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/powerdns/base-pdns-ci-image/debian-11-pdns-base:master
      env:
        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ env.REPO_HOME }}/build-scripts/UBSan.supp"
        ASAN_OPTIONS: detect_leaks=0
        LDAPHOST: ldap://ldapserver/
        ODBCINI: /github/home/.odbc.ini
        AUTH_BACKEND_IP_ADDR: "172.17.0.1"
      options: --sysctl net.ipv6.conf.all.disable_ipv6=0
    strategy:
      matrix:
        include:
          - backend: remote
            image: coscale/docker-sleep
            env: {}
            ports: []
      fail-fast: false
    services:
      database:
        image: ${{ matrix.image }}
        env: ${{ matrix.env }}
        ports: ${{ matrix.ports }}
        # FIXME: this works around dist-upgrade stopping all docker containers. dist-upgrade is huge on these images anyway. Perhaps we do want to run our tasks in a Docker container too.
        options: >-
          --restart always
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: recursive
          ref: ${{ inputs.branch-name }}
      - run: echo "normalized-branch-name=${{ inputs.branch-name || github.ref_name }}" | tr "/" "-" >> "$GITHUB_ENV"
      - name: Fetch the binaries
        uses: actions/download-artifact@v4
        with:
          name: pdns-auth-${{ env.normalized-branch-name }}
          path: /opt/pdns-auth
      # FIXME: install recursor for backends that have ALIAS
      - run: inv install-clang-runtime
      - run: inv install-auth-test-deps -b ${{ matrix.backend }}
      - run: inv test-auth-backend -b ${{ matrix.backend }}
      - run: inv generate-coverage-info /opt/pdns-auth/sbin/pdns_server $GITHUB_WORKSPACE
        if: ${{ env.COVERAGE == 'yes' }}
      - name: Coveralls Parallel auth backend ${{ matrix.backend }}
        if: ${{ env.COVERAGE == 'yes' }}
        uses: coverallsapp/github-action@v2
        with:
          flag-name: auth-backend-${{ matrix.backend }}
          path-to-lcov: $GITHUB_WORKSPACE/coverage.lcov
          parallel: true
          allow-empty: true
