---
name: Build packages

on:
  workflow_call:
    inputs:
      product:
        required: true
        description: Product to build
        type: string
      os:
        required: false
        description: OSes to build for, space separated
        type: string
        # please remember to update the pkghashes below when you
        # update this list, as well as the one in builder-dispatch.yml
        default: >-
          el-8
          el-9
          debian-bullseye
          debian-bookworm
          ubuntu-focal
          ubuntu-jammy
          ubuntu-noble
      ref:
        description: git ref to checkout
        type: string
        default: master
        required: false
      is_release:
        description: is this a release build?
        type: string
        required: false
        default: 'NO'
    secrets:
      DOWNLOADS_AUTOBUILT_SECRET:
        required: true
      DOWNLOADS_AUTOBUILT_RSYNCTARGET:
        required: true
      DOWNLOADS_AUTOBUILT_HOSTKEY:
        required: true

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

jobs:
  prepare:
    name: generate OS runner and arch list
    runs-on: ubuntu-24.04
    outputs:
      oslist: ${{ steps.get-oslist.outputs.oslist }}
      product-name: ${{ steps.normalize-name.outputs.normalized-package-name }}
      version: ${{ steps.getversion.outputs.version }}
      pkghashes-el-8-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-8-x86_64 }}
      pkghashes-el-8-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-8-aarch64 }}
      pkghashes-el-9-x86_64: ${{ steps.pkghashes.outputs.pkghashes-el-9-x86_64 }}
      pkghashes-el-9-aarch64: ${{ steps.pkghashes.outputs.pkghashes-el-9-aarch64 }}
      pkghashes-debian-bullseye-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-bullseye-x86_64 }}
      pkghashes-debian-bullseye-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-bullseye-aarch64 }}
      pkghashes-debian-bookworm-x86_64: ${{ steps.pkghashes.outputs.pkghashes-debian-bookworm-x86_64 }}
      pkghashes-debian-bookworm-aarch64: ${{ steps.pkghashes.outputs.pkghashes-debian-bookworm-aarch64 }}
      pkghashes-ubuntu-focal-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-focal-x86_64 }}
      pkghashes-ubuntu-focal-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-focal-aarch64 }}
      pkghashes-ubuntu-jammy-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-jammy-x86_64 }}
      pkghashes-ubuntu-jammy-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-jammy-aarch64 }}
      pkghashes-ubuntu-noble-x86_64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-noble-x86_64 }}
      pkghashes-ubuntu-noble-aarch64: ${{ steps.pkghashes.outputs.pkghashes-ubuntu-noble-aarch64 }}
      srchashes: ${{ steps.srchashes.outputs.srchashes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
          ref: ${{ inputs.ref }}
      - run: sudo apt-get update && sudo apt-get -y install jo
      - id: get-oslist
        run: |
          available_targets=$(ls builder-support/dockerfiles/Dockerfile.target.* )
          for i in $(echo "${{ inputs.os }}"); do echo $available_targets | grep -qq $i && targets+=($i) || echo "[WARN]: OS ${i} not available as target in ${{ inputs.ref }}";  done
          echo "oslist=$(jo -a ${targets[*]})" >> "$GITHUB_OUTPUT"
      - shell: bash
        id: getversion
        run: |
          echo "version=value" >> $GITHUB_OUTPUT
      - shell: bash
        id: normalize-name
        run: |
          echo "normalized-package-name=value" >> $GITHUB_OUTPUT
      - shell: bash
        id: srchashes
        run: |
          echo "srchashes=value" >> $GITHUB_OUTPUT
      - name: Generate package hashes for provenance
        shell: bash
        id: pkghashes
        run: |
          echo "pkghashes-el-8-x86_64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-el-8-aarch64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-el-9-x86_64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-el-9-aarch64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-debian-bullseye-x86_64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-debian-bullseye-aarch64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-debian-bookworm-x86_64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-debian-bookworm-aarch64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-ubuntu-jammy-x86_64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-ubuntu-jammy-aarch64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-ubuntu-noble-x86_64=value" >> $GITHUB_OUTPUT
          echo "pkghashes-ubuntu-noble-aarch64=value" >> $GITHUB_OUTPUT

  check-hashes:
    needs: prepare
    name: Check if hashes were created for all requested targets
    runs-on: ubuntu-24.04
    steps:
      - run: echo '${{ needs.prepare.outputs.oslist }}'
      - run: echo '${{ toJSON(needs.prepare.outputs) }}'
      - name: Get list of outputs from build jobs
        run: echo '${{ toJSON(needs.prepare.outputs) }}' | jq 'keys[]' | grep -vE 'version|product-name|oslist' | tee /tmp/build-outputs.txt
      - name: Get list of OS inputs
        run: |
          for os in $(echo '${{ needs.prepare.outputs.oslist }}' | jq -r '.[]'); do
            for architecture in x86_64 aarch64; do
              echo "\"pkghashes-$os-$architecture\"" | tee -a /tmp/os-inputs.txt
            done
          done
          sort -o /tmp/os-inputs.txt /tmp/os-inputs.txt
          echo "\"srchashes\"" | tee -a /tmp/os-inputs.txt
          echo "[OS INPUTS]"
          cat /tmp/os-inputs.txt
          echo; echo
          echo "[BUILD OUTPUTS]"
          cat /tmp/build-outputs.txt
          echo; echo
      - name: Fail if there is a hash missing
        run: if ! diff -q /tmp/build-outputs.txt /tmp/os-inputs.txt; then exit 1; fi
