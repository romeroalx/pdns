---
name: 'Testing custom actions'

on:
  push:
    branches:
    - odbc-cleanup-actions

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

jobs:
  # build-auth:
  #   name: build auth
  #   if: ${{ env.testing == true }}
  #   runs-on: ubuntu-20.04
  #   env:
  #     ASAN_OPTIONS: detect_leaks=0
  #     FUZZING_TARGETS: yes
  #     SANITIZERS: asan+ubsan
  #     UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ github.workspace }}/build-scripts/UBSan.supp"
  #     UNIT_TESTS: yes
  #   steps:
  #     - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
  #     - uses: actions/checkout@v3.1.0
  #       with:
  #         fetch-depth: 5
  #         submodules: recursive
  #     - name: get timestamp for cache
  #       id: get-stamp
  #       run: |
  #         echo "stamp=$(/bin/date +%s)" >> "$GITHUB_OUTPUT"
  #       shell: bash
  #     - name: let GitHub cache our ccache data
  #       uses: actions/cache@v3.2.4
  #       with:
  #         path: ~/.ccache
  #         key: auth-ccache-${{ steps.get-stamp.outputs.stamp }}
  #         restore-keys: auth-ccache-
  #     - run: build-scripts/gh-actions-setup-inv  # this runs apt update+upgrade
  #     - run: inv install-clang
  #     - run: inv install-auth-build-deps
  #     - run: inv ci-autoconf
  #     - run: inv ci-auth-configure
  #     - run: inv ci-auth-make
  #     - run: inv ci-auth-install-remotebackend-test-deps
  #     - run: inv ci-auth-run-unit-tests
  #     - run: inv ci-make-install
  #     - run: ccache -s
  #     - name: Store the binaries
  #       uses: actions/upload-artifact@v3 # this takes 30 seconds, maybe we want to tar
  #       with:
  #         name: pdns-auth
  #         path: /opt/pdns-auth
  #         retention-days: 1
# 
  # test-auth-backend:
  #   needs: build-auth
  #   if: ${{ env.testing == true }}
  #   runs-on: ubuntu-20.04
  #   env:
  #     UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ github.workspace }}/build-scripts/UBSan.supp"
  #     ASAN_OPTIONS: detect_leaks=0
  #     LDAPHOST: ldap://ldapserver/
  #   strategy:
  #     matrix:
  #       include:
  #         - backend: godbc_sqlite3
  #           image: coscale/docker-sleep
  #           # FORCING FAILURE
  #           # env: {}
  #           # ports: []
  #         - backend: godbc_mssql
  #           image: mcr.microsoft.com/mssql/server:2017-GA-ubuntu
  #           env:
  #             ACCEPT_EULA: Y
  #             SA_PASSWORD: 'SAsa12%%'
  #           ports:
  #             - 1433:1433
  #         - backend: ldap
  #           image: powerdns/ldap-regress:1.2.4-1
  #           env:
  #             LDAP_LOG_LEVEL: 0
  #             CONTAINER_LOG_LEVEL: 4
  #           ports:
  #             - 389:389
  #         - backend: geoip_mmdb
  #           image: coscale/docker-sleep
  #           env: {}
  #           ports: []
  #     fail-fast: false
  #   services:
  #     database:
  #       image: ${{ matrix.image }}
  #       env: ${{ matrix.env }}
  #       ports: ${{ matrix.ports }}
  #       # FIXME: this works around dist-upgrade stopping all docker containers. dist-upgrade is huge on these images anyway. Perhaps we # do want to run our tasks in a Docker container too.
  #       options: >-
  #         --restart always
  #   steps:
  #     - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
  #     - uses: actions/checkout@v3.1.0
  #       with:
  #         fetch-depth: 5
  #         submodules: recursive
  #     - name: Fetch the binaries
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: pdns-auth
  #         path: /opt/pdns-auth
  #     # - name: Setup upterm session
  #     #   uses: lhotari/action-upterm@v1
  #     # FIXME: install recursor for backends that have ALIAS
  #     - run: build-scripts/gh-actions-setup-inv  # this runs apt update+upgrade
  #     - run: inv install-clang-runtime
  #     - run: inv install-auth-test-deps -b ${{ matrix.backend }}
  #     - run: inv test-auth-backend -b ${{ matrix.backend }}

  dummy_ok:
    runs-on: ubuntu-20.04
    steps:
      - name: touch
        run: touch touched

  dummy_failed:
    runs-on: ubuntu-20.04
    steps:
      - name: Exit with error
        # run: exit 1
        run: "echo 'Not this time :)'"

  collect:
    needs:
      # - build-auth
      # - test-auth-backend
      - dummy_failed
      - dummy_ok
    if: success() || failure()
    runs-on: ubuntu-20.04
    steps:
      - name: Install jq
        run: "sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq -y jq"
      - name: Logging result of needed jobs
        run: "echo '${{ toJSON(needs) }}'"
      - name: Check if any previous job failed
        run: "for i in `echo '${{ toJSON(needs) }}' | jq -n 'inputs[].result' | tr -d '\"'`; do if [[ $i == 'failure' ]]; then exit 1; fi; done;"
      # - name: Get full list of jobs for this workflow
      #   run: yq e '.jobs | keys' .github/workflows/build-and-test-all.yml | grep -v '^- collect' | sort | tee /tmp/workflow-jobs-list.yml
      # - name: Get list of jobs the collect job depends on
      #   run: yq e '.jobs.collect.needs | ... comments=""' .github/workflows/build-and-test-all.yml | sort | tee /tmp/# workflow-collect-dependencies.yml
      # - name: Diff them
      #   run: diff -u /tmp/workflow-jobs-list.yml /tmp/workflow-collect-dependencies.yml
