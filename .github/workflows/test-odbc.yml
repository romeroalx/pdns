---
name: 'Testing custom actions'

on:
  push:
    branches:
    - odbc-cleanup-actions

permissions: # least privileges, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

jobs:
  build-auth:
    name: build auth
    runs-on: ubuntu-20.04
    env:
      ASAN_OPTIONS: detect_leaks=0
      FUZZING_TARGETS: yes
      SANITIZERS: asan+ubsan
      UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ github.workspace }}/build-scripts/UBSan.supp"
      UNIT_TESTS: yes
    steps:
      - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 5
          submodules: recursive
      - name: get timestamp for cache
        id: get-stamp
        run: |
          echo "stamp=$(/bin/date +%s)" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: let GitHub cache our ccache data
        uses: actions/cache@v3.2.4
        with:
          path: ~/.ccache
          key: auth-ccache-${{ steps.get-stamp.outputs.stamp }}
          restore-keys: auth-ccache-
      - run: build-scripts/gh-actions-setup-inv  # this runs apt update+upgrade
      - run: inv install-clang
      - run: inv install-auth-build-deps
      - run: inv ci-autoconf
      - run: inv ci-auth-configure
      - run: inv ci-auth-make
      - run: inv ci-auth-install-remotebackend-test-deps
      - run: inv ci-auth-run-unit-tests
      - run: inv ci-make-install
      - run: ccache -s
      - name: Store the binaries
        uses: actions/upload-artifact@v3 # this takes 30 seconds, maybe we want to tar
        with:
          name: pdns-auth
          path: /opt/pdns-auth
          retention-days: 1

  test-auth-backend:
    needs: build-auth
    runs-on: ubuntu-20.04
    env:
      UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1:suppressions=${{ github.workspace }}/build-scripts/UBSan.supp"
      ASAN_OPTIONS: detect_leaks=0
    strategy:
      matrix:
        include:
          - backend: godbc_sqlite3
            image: coscale/docker-sleep
            env_vars: {}
            ports: []
          - backend: godbc_mssql
            image: mcr.microsoft.com/mssql/server:2017-GA-ubuntu
            env_vars:
              ACCEPT_EULA: Y
              SA_PASSWORD: 'SAsa12%%'
            ports:
              - 1433:1433
      fail-fast: false
    services:
      database:
        image: ${{ matrix.image }}
        env: ${{ matrix.env_vars }}
          # POSTGRES_USER: runner
          # POSTGRES_HOST_AUTH_METHOD: trust
          # MYSQL_ALLOW_EMPTY_PASSWORD: 1
          # ACCEPT_EULA: Y
          # SA_PASSWORD: 'SAsa12%%'
        ports: ${{ matrix.ports }}
          # - 3306:3306
          # - 5432:5432
          # - 1433:1433
        # FIXME: this works around dist-upgrade stopping all docker containers. dist-upgrade is huge on these images anyway. Perhaps we do want to run our tasks in a Docker container too.
        options: >-
          --restart always
    steps:
      - uses: PowerDNS/pdns/set-ubuntu-mirror@meta
      - uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 5
          submodules: recursive
      - name: Fetch the binaries
        uses: actions/download-artifact@v3
        with:
          name: pdns-auth
          path: /opt/pdns-auth
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      # FIXME: install recursor for backends that have ALIAS
      - run: build-scripts/gh-actions-setup-inv  # this runs apt update+upgrade
      - run: inv install-clang-runtime
      - run: inv install-auth-test-deps -b ${{ matrix.backend }}
      - run: inv test-auth-backend -b ${{ matrix.backend }}
